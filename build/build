#!/usr/bin/env python

import csv
from datetime import datetime
import email.utils
import io
from jinja2 import Environment, FileSystemLoader
import os
import sys
import time
import traceback
from xml.sax.saxutils import escape


WRITE_CSV = False


def format_date(d):
    return email.utils.formatdate(time.mktime(d.timetuple()))


class StrippedCountedIterator(object):
    def __init__(self, fp):
        self.fp = fp
        self.line_number = 0

    def __iter__(self):
        return self

    def next(self):
        l = next(self.fp).strip()
        self.line_number += 1
        return l


def main():
    template_env = Environment(loader=FileSystemLoader('build/'))

    entries = []

    csv_file = None
    if WRITE_CSV:
        csv_file_raw = open('target/news.csv', 'wb')
        csv_file = csv.writer(csv_file_raw)

    with io.open('news.txt', encoding='utf-8') as fp_:
        fp = StrippedCountedIterator(fp_)
        while True:
            try:
                title = next(fp)
            except StopIteration:
                break
            else:
                if not title:
                    continue
                try:
                    link = next(fp)
                    date = next(fp)
                    date = datetime.strptime(date, '%Y-%m-%d')
                    date = format_date(date)
                    tags = next(fp)
                    if not tags.strip():
                        tags = []
                    else:
                        tags = [tag.strip() for tag in tags.split(',')]
                    description = []
                    try:
                        while True:
                            line = next(fp)
                            if not line:
                                line = next(fp)
                                if not line:
                                    break
                                else:
                                    description.append('')
                            description.append(line)
                    except StopIteration:
                        pass
                    if not description:
                        sys.stderr.write("Missing description line %d\n" %
                                         fp.line_number)
                        sys.exit(1)
                    description = '\n'.join(description)

                    if csv_file is not None:
                        csv_file.writerow([title.encode('utf-8'),
                                           link.encode('utf-8'),
                                           date.encode('utf-8'),
                                           description.encode('utf-8'),
                                           ','.join(t.encode('utf-8')
                                                    for t in tags)])
                    entries.append({
                        'title': escape(title),
                        'link': escape(link),
                        'date': escape(date),
                        'tags': [escape(tag) for tag in tags],
                        'description': escape(description)
                    })
                except StopIteration:
                    sys.stderr.write("The last entry is incomplete\n")
                    sys.exit(1)
                except Exception:
                    traceback.print_exc()
                    sys.stderr.write("Error located on line %d\n" %
                                     fp.line_number)
                    sys.exit(1)

    if csv_file is not None:
        csv_file = None
        csv_file_raw.close()

    template = template_env.get_template('feed.rss.tpl')

    if not os.path.isdir('target'):
        os.mkdir('target')

    with io.open('target/feed.rss', 'w', encoding='utf-8') as fp:
        for chunk in template.generate({'items': entries}):
            fp.write(chunk)


if __name__ == '__main__':
    main()
